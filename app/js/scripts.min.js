// Lazy loading img & background images using intersection observer
// Reference: https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/
// Using example: <img class="lazy" src="thumb.gif" data-src="real-img.jpg" data-srcset="real-img@1x.jpg 1x, real-img@2x.jpg 2x">
// Background image class usign example: <div class="lazy-background"> with added class ".visible" for styling
// Background image style attribute lazy loading example: <div data-bg="image.jpg">

// delete window.IntersectionObserver; // Fallback Testing

document.addEventListener('DOMContentLoaded', function() {

	var lazyImages = [].slice.call(document.querySelectorAll('img.lazy'));
	var lazyBackgrounds = [].slice.call(document.querySelectorAll('.lazy-background'));
	var lazyBackgroundsData = [].slice.call(document.querySelectorAll('[data-bg]'));

	if ('IntersectionObserver' in window) {

		let lazyImageObserver = new IntersectionObserver(function(entries, observer) {
			entries.forEach(function(entry) {
				if (entry.isIntersecting) {
					let lazyImage = entry.target;
					lazyImage.src = lazyImage.dataset.src;
					lazyImage.srcset = lazyImage.dataset.srcset;
					lazyImage.classList.remove('lazy');
					lazyImageObserver.unobserve(lazyImage);
				}
			});
		});
		lazyImages.forEach(function(lazyImage) {
			lazyImageObserver.observe(lazyImage);
		});

	let lazyBackgroundObserver = new IntersectionObserver(function(entries, observer) {
		entries.forEach(function(entry) {
			if (entry.isIntersecting) {
				entry.target.classList.add('visible');
				lazyBackgroundObserver.unobserve(entry.target);
			}
		});
	});
	lazyBackgrounds.forEach(function(lazyBackground) {
		lazyBackgroundObserver.observe(lazyBackground);
	});

	let lazyBackgroundDataObserver = new IntersectionObserver(function(entries, observer) {
		entries.forEach(function(entry) {
			if (entry.isIntersecting) {
				let lazyBackgroundData = entry.target;
				lazyBackgroundData.style.backgroundImage = 'url(' + lazyBackgroundData.dataset.bg + ')';
				lazyBackgroundDataObserver.unobserve(lazyBackgroundData);
			}
		});
	});
	lazyBackgroundsData.forEach(function(lazyBackgroundData) {
		lazyBackgroundDataObserver.observe(lazyBackgroundData);
	});

	} else {

		// Fallback

		lazyImages.forEach(function(lazyImage) {
			lazyImage.src = lazyImage.dataset.src;
			lazyImage.srcset = lazyImage.dataset.srcset;
		});
		lazyBackgrounds.forEach(function(lazyBackground) {
			lazyBackground.classList.add('visible');
		});
		lazyBackgroundsData.forEach(function(lazyBackgroundData) {
			lazyBackgroundData.style.backgroundImage = 'url(' + lazyBackgroundData.dataset.bg + ')';
		});

	}

});


document.addEventListener("DOMContentLoaded", function() {
	/**
	 * disappearing menu
	 * 
	 */
	
	$('#header .menu-swith').on('click', function(event) {
		$('#opacity-menu').fadeIn(600).show(600);
	});

	$('#opacity-menu .menu-swith').on('click', function(event) {
		
		$('#opacity-menu').fadeOut(600).hide(600);
	
	});
	
	/**
	 * setting up lazy loading of images
	 * 
	 */
	
	// $('img.lazy').lazyLoad();

	/*
	* parallax effect in live bg
	*
	*/

	function moveLiveImg(event) {
		
		let bgItems = document.querySelectorAll('#live-bg .live-bg__item');
		let coordX = event.clientX;
		let coordY = event.clientY; 

		bgItems.forEach( function(item) {
			
			let itemSpeed = item.getAttribute('data-speed');
			let translateValueX = (coordX*itemSpeed)/50;
			let translateValueY = (coordY*itemSpeed)/50;

			item.style.transform = 'translate('+translateValueX+'px, '+translateValueY+'px)';

		});
		
	}

	document.addEventListener('mousemove', moveLiveImg);

	/**
	 * preloader
	 */	
	$('#preloader').delay(600).fadeOut(600);

	/**
	 * animated title at the top of the page 
	 */

	
});

document.addEventListener('DOMContentLoaded', function () {
  new magicText({
    'selector' :'.text-write',
    'printText': true, 
  });

  /**
   * the effect of printed text
   * @param  {obj} obj 
   */
  function magicText(params) {
    var printTextOption = params['selector'] != '' && params['printText'] == true;
    var elems = getHtmlElements();

    if (printTextOption) {
      initPrintedText(elems);
    }
    /**
     * 
     * @param  {array} elems 
     * @return {[type]}       
     */
    function initPrintedText(elems) {
      var elemsText = getTextElems(elems);

      for (var i = 0; i < elems.length; i++) {
        printText(elems[i], elemsText[i]);
      }
    }
    /**
     * @param  {obj} elems 
     * @return {array}       
     */
    function getTextElems(elems) {
      var elemsText = [];
      elems.forEach(function (item) {
        elemsText.push(item.textContent);
      });
      return elemsText;
    }
    /**
     * [printText description]
     * @param  {obj} field HTML element
     * @param  {[str]} text  
     */
    function printText(field, text) {
      var posLetter = 0;
      var string = '';
      var interval = getRandomInt(getRandomInt(250 * 2.5));
      var cursor = '<i class="magic-cursor"></i>';
      var printLetter = setInterval(function () {
        string += text[posLetter];
        field.innerHTML = string + cursor;
        posLetter++;

        if (posLetter >= text.length) {
          clearInterval(printLetter);
        }
      }, interval);
    }
    /** 
     * @param  {int} max 
     * @return {int} 
     */
    function getRandomInt(max) {
      return Math.floor(Math.random() * Math.floor(max));
    }
    /**
     * @return {obj} elems
     */
    function getHtmlElements() {
      var elems = document.querySelectorAll(params.selector);
      return elems;
    }
  }
});
